import time
import dateparser
import pytz
from datetime import datetime
import urllib3
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import math

def sma(source, lenght=9, wonone = True) :
    """Finds the moving average of a list of values. Enter: 
        source = data source, openprice, closeprice, etc. should be a list with Float variables
        lenght = Length
        Wonone = True if you want the vector incomplete, False if you want the vector complete with empty places."""
    ret = np.cumsum(source, dtype=float)
    ret[lenght:] = ret[lenght:] - ret[:-lenght]
    if wonone == True: 
        b = np.repeat(None, (lenght - 1))
        c = np.concatenate((b,ret[lenght - 1:] / lenght))
    else : 
        c = ret[lenght - 1:] / lenght
    return c



def ema(source, lenght=9, wonone = True) :
    """Finds the exponential moving average of a list of values. Enter: 
        source = data source, openprice, closeprice, etc. should be a list with Float variables
        lenght = Length
        Wonone = True if you want the vector incomplete, False if you want the vector complete with empty places."""
    ema = []
    j = 1
    #get n sma first and calculate the next n period ema
    sma = sum(source[:lenght]) / lenght
    multiplier = 2 / float(1 + lenght)
    ema.append(sma)
    ema.append(( (source[lenght] - sma) * multiplier) + sma)
    #now calculate the rest of the values
    for i in source[lenght+1:]:
        tmp = ( (i - ema[j]) * multiplier) + ema[j]
        j = j + 1
        ema.append(tmp)
    b = []
    if wonone == True:
        b = np.repeat(None, (lenght-1))
    return np.concatenate((b,ema), axis=None)



def exponentialmovingaverage(source, amq = 9, amm = 18, ams = 42):
    """Find 3 exponential moving averages. Returns complete vectors. Enter the 3 lengths """
    lastvalue = len(source) - 1
    AMquick = ema(source, amq)
    AMmedium = ema(source, amm)
    AMslow = ema(source, ams)
    x = np.asarray(time)
    #graphicator(x, source, AMslow, AMmedium, AMquick)  
    
    if (AMquick[lastvalue] > AMslow[lastvalue]):
        status = True
    else:
        status = False
    return list(source), AMquick , AMmedium, AMslow
        

def macd(source, emaquick =26, emaslow =12, emasignal =9):
    """Find the MACD of a source. 
        Source: Open Price, Close Price, etc. This variable must be a list.
        emaquick : the fast moving average
        emaslow  : the slow moving average
        emasignal: The moving average of the signal
        Return: source, MACD, signal, Histograme"""
    #inital variables
    lv = len(source) 
    MACD0 = []
    MACD1 = []
    Histograme = []
    
    #Calculate MACD
    PMEs = ema( source, emaslow)
    PMEq = ema( source, emaquick)
    for i in range(lv):
        if i < emaquick:
            MACD0.append(None)
        elif i >= emaquick:
            result = PMEs[i] - PMEq[i] 
            MACD1.append(result)
    #Calculate signal     
    signal0 = ema(MACD1, emasignal)

    #complete MACD y Signal
    signal = np.concatenate((MACD0,signal0), axis=None)
    MACD = np.concatenate((MACD0,MACD1), axis=None)
    #Calculamos el histograma
    for i in range(lv):
        if (MACD[i]== None or signal[i]== None):
            Histograme.append(None)
        else:
            result = MACD[i] - signal[i] 
            Histograme.append(result)

    return list(source), MACD, signal, Histograme
    
    
    
    
def emv(Testing, divider = 10000, movingaverage = 14, judge = 0.4 ):
    """Ease of movement (EMV) 
        Input data:
            dataframe
            divider
            movingaverage
            judge: judge manual """

    Highprice = list(Testing['high'])
    Lowprice  = list(Testing['low'])
    Volume    = list(Testing['volume'])
    
    size = len(Highprice)
    distance = []
    box = []
    emv = []
    smaEMV0 = []
    smaEMV1 = []
    smaEMV = []
    lineup = []
    linedown = []
    
    for i in range(size):
        distance.append(((Highprice[i]+Lowprice[i])/2)-((Highprice[i-1]+Lowprice[i-1])/2))
        try: 
            box.append((Volume[i]/divider)/ ((Highprice[i]-Lowprice[i])))
            emv.append(-(1-(distance[i]/box[i])))
        except ZeroDivisionError:
            return emv.append(0)
    emv.pop(0)
    smaEMV0 = sma(emv, movingaverage)
    smaEMV1 = sma(emv, movingaverage, False)
    
    
    # Start bandas discriminadoras
    MAX = max(smaEMV1)    
    MIN = min(smaEMV1)    
    total = MAX - MIN
    parte = total/2
    margin = parte*judge
    limitUP = MAX - margin
    limitDN = MIN + margin
    
    lineup = createline( limitUP, len(emv)+1)
    linedown = createline( limitDN, len(emv)+1)
    #End Bandas
        
    
    smaEMV = smaEMV0.tolist()
    smaEMV.append(None)
    
    return smaEMV, lineup, linedown
    

def quickness(y, rango = 10):
    
    z = []
    for K in range(rango):   
        z = np.append(z, K)
    x = z

    regresion_lineal = LinearRegression() 
    regresion_lineal.fit(x.reshape(-1,1), y) 
    return regresion_lineal.coef_[0]
